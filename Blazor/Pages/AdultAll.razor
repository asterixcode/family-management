@page "/AdultAll"
@using Blazor.Services
@using Blazor.Models

@inject IDataApiService DataApiService
@inject NavigationManager NavigationManager


<div>
    <AuthorizeView Policy="AdminOnly">
        <button style="margin-bottom: 30px" @onclick="@(e => NavigationManager.NavigateTo("/AdultAdd"))">
            <span class="oi oi-plus" aria-hidden="true"></span>
            Add adult
        </button>
    </AuthorizeView>
</div>


@if (allAdults == null)
{
    <di class="spinner"></di>
}
else if (!allAdults.Any())
{
    <p>
        <em>No adults in the list. Please add some.</em>
    </p>
}
else
{
    <p>
        Filter by ID: <input type="number" @oninput="@(arg => FilterById(arg))" style="width: 50px"/>
    </p>
    <p>
        Filter by First Name:
        <input type="text" @oninput="@(arg => FilterByFirstName(arg))" style="width:120px"/>
    </p>

    <h3>List of Adults</h3>

    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Age</th>
            <th>Sex</th>
            <th>Job Title</th>
            <AuthorizeView Policy="AdminOnly">
                <th>Remove</th>
                <th>Edit</th>
                <th>More details</th>
            </AuthorizeView>
        </tr>
        </thead>

        <tbody>
        @foreach (Adult adult in adultsToShow)
        {
            <tr>
                <td>@adult.Id</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.Age</td>
                <td>@adult.Sex</td>
                <td>@adult.JobTitle.JobTitle</td>

                <AuthorizeView Policy="AdminOnly">
                    <td>
                        <button @onclick="@(() => DeleteAdultAsync(adult.Id))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </td>
                    <td>
                        <button @onclick="@(e => NavigationManager.NavigateTo($"/AdultEdit/{adult.Id}"))">
                            <i class="oi oi-pencil" style="color:#1b6ec2"/>
                        </button>
                    </td>
                    <td>
                        <button @onclick="@(e => NavigationManager.NavigateTo($"/AdultDetails/{adult.Id}"))">
                            <i class="oi oi-info" style="color:#1b6ec2"/>
                        </button>
                    </td>
                </AuthorizeView>
                
            </tr>
        }
        </tbody>
    </table>
}



@code {
    
    private IList<Adult> allAdults = new List<Adult>();
    private IList<Adult> adultsToShow;

    private int? filterById = null;
    private string filterByFirstName = "";

    
    protected override async Task OnInitializedAsync()
    {
        allAdults = await DataApiService.GetAllAdultsAsync();
        adultsToShow = allAdults;
        ExecuteFilter();
    }

    private void FilterById(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
            if (filterById < 0)
            {
                filterById = null;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ExecuteFilter();
    }

    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filterByFirstName = "";
        try
        {
            filterByFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = allAdults.Where(a =>
            (filterById != null && a.Id == filterById || filterById == null) &&
            (!filterByFirstName.Equals("") && a.FirstName.Contains(filterByFirstName) || filterByFirstName.Equals(""))
            ).ToList();
    }

    private async Task DeleteAdultAsync(int id)
    {
        //Adult toDelete = allAdults.First(a => a.Id == id);
        await DataApiService.DeleteAdultAsync(id);

        ExecuteFilter();
    }
    
}