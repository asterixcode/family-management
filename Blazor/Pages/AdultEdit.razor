@page "/AdultEdit/{Id:int}"
@using Blazor.Services
@using Blazor.Models

@inject IDataApiService DataApiService
@inject NavigationManager NavigationManager


<div>
    <button class="btn btn-outline-dark" @onclick="@Back">
        Back
    </button>
    <br/>
    <br/>
    <h3>Edit information - Id: @adultToEdit.Id | First Name: @adultToEdit.FirstName</h3>
    <br/>
</div>

@if (adultToEdit == null)
{
    <em>Adult not found.</em>
}
else
{
    <EditForm Model="@adultToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/> <ValidationSummary/>
        <div class="form-group"> First Name:<br/> <InputText @bind-Value="adultToEdit.FirstName"/> </div>
        <div class="form-group"> Last Name:<br/> <InputText @bind-Value="adultToEdit.LastName"/></div>
        <div class="form-group"> Hair Color:<br/> <InputText @bind-Value="adultToEdit.HairColor"/></div>
        <div class="form-group"> Eye Color:<br/> <InputText @bind-Value="adultToEdit.EyeColor"/></div>
        <div class="form-group"> Age:<br/> <InputNumber @bind-Value="adultToEdit.Age"/></div>
        <div class="form-group"> Height:<br/> <InputNumber @bind-Value="adultToEdit.Height"/></div>
        <div class="form-group"> Weight:<br/> <InputNumber @bind-Value="adultToEdit.Weight"/></div>

        <div class="form-group"> Sex:<br/>
            <InputSelect @bind-Value="adultToEdit.Sex">
                <option value="F">Female</option>
                <option value="M">Male</option>
            </InputSelect>
        </div>
        
        <div class="form-group"> Job title:<br/> <InputText @bind-Value="_jobName"/></div>
        <div class="form-group"> Salary:<br/> <InputNumber @bind-Value="_salary"/></div>
        <br/>
        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Save</button>
        </p>
    </EditForm>
}



@code {

    [Parameter]
    public int Id { get; set; }

    private Adult adultToEdit = new Adult();
    private string _jobName;
    private int _salary;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            adultToEdit = await DataApiService.GetAdultByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task Save()
    {
        if (_jobName != null)
        {
            adultToEdit.JobTitle.JobTitle = _jobName;
        }
        if (_salary != null)
        {
            adultToEdit.JobTitle.Salary = _salary;
        }
        
        await DataApiService.EditAdultAsync(adultToEdit);
        NavigationManager.NavigateTo("/AdultAll");
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/AdultAll");
    }

}